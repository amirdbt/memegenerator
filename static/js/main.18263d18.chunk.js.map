{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randmg","url","randImg","topText","bottomText","fetch","then","response","json","memes","data","className","onSubmit","this","type","placeholder","onChange","height","React","Component","particlesOptions","particles","number","density","enable","value_area","App","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAaeA,EAXD,WACV,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,aAER,+C,0CCgDGC,E,YArDX,aAAc,IAAD,8BACT,+CASNC,aAAe,SAACC,GAAU,IAAD,EACFA,EAAMC,OAApBC,EADgB,EAChBA,KAAKC,EADW,EACXA,MACZ,EAAKC,SAAL,eACKF,EAAQC,KAbA,EAgBfE,aAAa,SAACL,GACZA,EAAMM,iBACP,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAS,EAAKH,MAAMC,YAAYL,GAASQ,IAC9C,EAAKX,SAAS,CACVY,QAAUF,KAnBV,EAAKH,MAAM,CACPM,QAAS,GACTC,WAAY,GACZF,QAAS,gCACTJ,YAAc,IANT,E,iFAwBK,IAAD,OACfO,MAAM,qCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACPE,EAASF,EAASG,KAAlBD,MACP,EAAKnB,SAAS,CACVQ,YAAcW,Q,+BAKpB,OACI,6BACI,0BAAME,UAAU,YAAYC,SAAUC,KAAKtB,cACvC,2BAAOuB,KAAK,OAAO1B,KAAK,UAAUC,MAAOwB,KAAKhB,MAAMM,QAASY,YAAY,WAAWC,SAAUH,KAAK5B,eACnG,2BAAO6B,KAAK,OAAO1B,KAAK,aAAaC,MAAOwB,KAAKhB,MAAMO,WAAYW,YAAY,cAAcC,SAAUH,KAAK5B,eAE5G,wCAEJ,yBAAK0B,UAAU,QACX,yBAAK7B,IAAK+B,KAAKhB,MAAMK,QAASnB,IAAI,QAAQkC,OAAO,UACnD,wBAAIN,UAAU,OAAOE,KAAKhB,MAAMM,SAChC,wBAAIQ,UAAU,UAAd,IAAyBE,KAAKhB,MAAMO,kB,GA/C1Bc,IAAMC,WCG5BC,G,MAAkB,CACtBC,UAAW,CACTC,OAAO,CACLjC,MAAO,GACPkC,QAAQ,CACNC,QAAO,EACPC,WAAY,SAgBLC,MAXf,WACE,OACE,6BACG,kBAAC,IAAD,CAAWf,UAAU,YAAYgB,OAAQP,IAC1C,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCXcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.18263d18.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header =() =>{\r\n    return(\r\n        <header>\r\n            <img \r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from \"react\"\r\n\r\n\r\nclass MemeGenerator extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs : []\r\n        }\r\n        \r\n    }\r\n  handleChange = (event) =>{\r\n    const {name,value} = event.target\r\n    this.setState({\r\n        [name] : value\r\n    })\r\n  }\r\n  handleSubmit=(event)=>{\r\n    event.preventDefault()\r\n   const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n   const randmg = this.state.allMemeImgs[randNum].url\r\n    this.setState({\r\n        randImg : randmg\r\n    })\r\n  }\r\n  componentDidMount(){\r\n      fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response =>{\r\n          const {memes} = response.data\r\n          this.setState({\r\n              allMemeImgs : memes\r\n          })\r\n      })\r\n  }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"topText\" value={this.state.topText} placeholder=\"top text\" onChange={this.handleChange} />\r\n                    <input type=\"text\" name=\"bottomText\" value={this.state.bottomText} placeholder=\"bottom text\" onChange={this.handleChange} />\r\n\r\n                    <button>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randImg} alt=\"memes\" height=\"700px\"/>\r\n                  <h2 className=\"top\">{this.state.topText}</h2>  \r\n                  <h2 className=\"bottom\"> {this.state.bottomText}</h2> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator\r\n/**\r\n     * Create a method that, when the \"Gen\" button is clicked, chooses one of the\r\n     * memes from our `allMemeImgs` array at random and makes it so that is the\r\n     * meme image that shows up in the bottom portion of our meme generator site\r\n     */\r\n\r\n     ","import React from 'react';\nimport Particles from 'react-particles-js';\nimport Header from './components/Header'\nimport MemeGenerator from './components/MemeGenerator'\nimport \"./App.css\"\n\nconst particlesOptions ={\n  particles :{\n    number:{\n      value: 80,\n      density:{\n        enable:true,\n        value_area: 800\n      }\n    }\n  }\n}\nfunction App() {\n  return (\n    <div>\n       <Particles className=\"particles\" params={particlesOptions} />\n      <Header />\n     \n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}